// Generated by CoffeeScript 1.7.1
(function() {
  var MongoClient, MongoDBEventStore,
    __slice = [].slice;

  MongoClient = require('mongodb').MongoClient;

  MongoDBEventStore = (function() {
    function MongoDBEventStore() {}

    MongoDBEventStore.prototype.initialize = function() {
      var callback, _arg, _db, _i;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      _db = _arg[0];
      if (_db) {
        this.db = _db;
        if (typeof callback === "function") {
          callback(null);
        }
        return;
      }
      return MongoClient.connect('mongodb://127.0.0.1:27017/events', (function(_this) {
        return function(err, db) {
          if (err) {
            console.log('MongoDB connection failed');
            if (typeof callback === "function") {
              callback(err, null);
            }
            return;
          }
          console.log('MongoDB connected');
          _this.db = db;
          return typeof callback === "function" ? callback(null) : void 0;
        };
      })(this));
    };

    MongoDBEventStore.prototype.save = function(domainEvent, callback) {
      return this.db.collection(domainEvent.aggregate.name, function(err, collection) {
        if (err) {
          return callback(err, null);
        }
        return collection.insert(domainEvent, function(err, doc) {
          if (err) {
            return callback(err);
          }
          return callback(null);
        });
      });
    };

    MongoDBEventStore.prototype.find = function() {
      var aggregateName, callback, err, projection, query, _arg, _i;
      _arg = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      aggregateName = _arg[0], query = _arg[1], projection = _arg[2];
      if (!query) {
        err = new Error('Missing query');
        callback(err, null);
        return;
      }
      if (!projection) {
        projection = {};
      }
      return this.db.collection(aggregateName, (function(_this) {
        return function(err, collection) {
          if (err) {
            return callback(err, null);
          }
          return collection.find(query, projection, function(err, cursor) {
            if (err) {
              return callback(err, null);
            }
            return cursor.toArray(function(err, items) {
              if (err) {
                return callback(err, null);
              }
              return callback(null, items);
            });
          });
        };
      })(this));
    };

    return MongoDBEventStore;

  })();

  module.exports = MongoDBEventStore;

}).call(this);
